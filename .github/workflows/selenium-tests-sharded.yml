name: Selenium Tests (Sharded)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

jobs:
  test-sharded:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    strategy:
      fail-fast: false  # Continue other shards even if one fails
      matrix:
        browser: [chrome]
        java-version: [21]
        shard: [1, 2, 3, 4]

    name: "Shard ${{ matrix.shard }} - ${{ matrix.browser }} - Java ${{ matrix.java-version }}"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest

    - name: Install dependencies
      run: mvn dependency:resolve

    - name: Run shard ${{ matrix.shard }} tests
      id: test-execution
      continue-on-error: true
      run: |
        mvn clean test -Pci \
          -DsuiteXmlFile=src/test/resources/config/testng-shard-${{ matrix.shard }}.xml \
          -Dbrowser=${{ matrix.browser }} \
          -Dheadless=true
      env:
        MAVEN_OPTS: "-Xmx3g -Xms1g"
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
        ENVIRONMENT: dev
        SHARD_ID: ${{ matrix.shard }}

    - name: Generate Allure Report
      if: always()
      run: mvn allure:report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-shard-${{ matrix.shard }}-${{ matrix.browser }}-java${{ matrix.java-version }}
        path: |
          target/surefire-reports/
          target/allure-results/
          target/reports/
          target/screenshots/

    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-shard-${{ matrix.shard }}-${{ matrix.browser }}-java${{ matrix.java-version }}
        path: target/allure-results/

    - name: Publish Test Results for Shard ${{ matrix.shard }}
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results - Shard ${{ matrix.shard }} - ${{ matrix.browser }} - Java ${{ matrix.java-version }}
        path: target/surefire-reports/TEST-*.xml
        reporter: java-junit
        fail-on-error: true

    - name: Fail job if tests failed
      if: steps.test-execution.outcome == 'failure'
      run: exit 1

  merge-reports:
    needs: test-sharded
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Download all shard results
      uses: actions/download-artifact@v4
      with:
        path: all-shards/

    - name: Merge Allure results
      run: |
        mkdir -p target/allure-results
        find all-shards/ -name "allure-results" -type d | while read dir; do
          cp -r "$dir"/* target/allure-results/ 2>/dev/null || true
        done

    - name: Generate combined Allure report
      run: |
        mvn allure:report

    - name: Upload combined report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: combined-allure-report
        path: target/site/allure-maven-plugin/

    - name: Extract failures for AI analysis
      run: |
        chmod +x .github/scripts/extract-failures.sh
        .github/scripts/extract-failures.sh all-shards test-failures.txt

    - name: Upload failure summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-failures-summary
        path: test-failures.txt
        retention-days: 30

    - name: Merge test results summary
      run: |
        echo "# Test Execution Summary (All Shards)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        total_tests=0
        total_failures=0
        total_errors=0
        total_skipped=0

        for shard in 1 2 3 4; do
          if [ -d "all-shards/test-results-shard-${shard}-chrome-java21/surefire-reports" ]; then
            echo "## Shard ${shard} Results" >> $GITHUB_STEP_SUMMARY

            # Count results from XML files
            shard_dir="all-shards/test-results-shard-${shard}-chrome-java21/surefire-reports"
            tests=$(grep -h 'tests=' "$shard_dir"/TEST-*.xml 2>/dev/null | grep -oP 'tests="\K[0-9]+' | awk '{s+=$1} END {print s}')
            failures=$(grep -h 'failures=' "$shard_dir"/TEST-*.xml 2>/dev/null | grep -oP 'failures="\K[0-9]+' | awk '{s+=$1} END {print s}')
            errors=$(grep -h 'errors=' "$shard_dir"/TEST-*.xml 2>/dev/null | grep -oP 'errors="\K[0-9]+' | awk '{s+=$1} END {print s}')
            skipped=$(grep -h 'skipped=' "$shard_dir"/TEST-*.xml 2>/dev/null | grep -oP 'skipped="\K[0-9]+' | awk '{s+=$1} END {print s}')

            echo "- Tests: ${tests:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: ${failures:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- Errors: ${errors:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- Skipped: ${skipped:-0}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            total_tests=$((total_tests + ${tests:-0}))
            total_failures=$((total_failures + ${failures:-0}))
            total_errors=$((total_errors + ${errors:-0}))
            total_skipped=$((total_skipped + ${skipped:-0}))
          fi
        done

        echo "## Overall Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Total Tests: ${total_tests}" >> $GITHUB_STEP_SUMMARY
        echo "- Total Failures: ${total_failures}" >> $GITHUB_STEP_SUMMARY
        echo "- Total Errors: ${total_errors}" >> $GITHUB_STEP_SUMMARY
        echo "- Total Skipped: ${total_skipped}" >> $GITHUB_STEP_SUMMARY

        pass_rate=$(awk "BEGIN {printf \"%.2f\", (${total_tests} - ${total_failures} - ${total_errors}) * 100 / ${total_tests}}")
        echo "- Pass Rate: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY

        # Add condensed failure list to summary
        if [ -f test-failures.txt ]; then
          failure_count=$(grep -c '^\[.*\].*:' test-failures.txt 2>/dev/null || echo "0")
          if [ "$failure_count" -gt 0 ]; then
            echo "## ❌ Failed Tests ($failure_count)" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep '^\[.*\].*:' test-failures.txt | head -20 >> $GITHUB_STEP_SUMMARY
            if [ "$failure_count" -gt 20 ]; then
              echo "... and $((failure_count - 20)) more (see artifact test-failures-summary)" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Download:** test-failures-summary artifact for AI-optimized failure analysis" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
